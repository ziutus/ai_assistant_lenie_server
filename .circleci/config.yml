version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
  machine-executor:
    machine:
      docker_layer_caching: true

jobs:
  start-ec2:
    executor: python-executor
    steps:
      - aws-cli/setup
      - run:
          name: "Start EC2 instances"
          command: |
            aws ec2 start-instances --instance-ids $INSTANCE_ID

  run-job-on-ec2:
    executor: machine-executor
    resource_class: itsnap/itsnap-runner
    steps:
      - checkout
      - run:
          name: "Tworzenie wirtualnego środowiska Python 3.11"
          command: |
            python3.11 -m venv venv
            . venv/bin/activate

            # Sprawdzenie, czy venv jest aktywny
            echo "Sprawdzanie aktywacji wirtualnego środowiska:"
            echo "VIRTUAL_ENV=$VIRTUAL_ENV"
            which python
            python -c "import sys; print(f'Interpreter Pythona: {sys.executable}')"
            python -c "import sys; print(f'Ścieżki systemowe: {sys.path}')"
            
            python -m pip install --upgrade pip
            pip install -r requirements_server.txt || echo "No requirements_server.txt file found"
            echo "Wirtualne środowisko Python 3.11 utworzone i aktywowane"
            python --version
      - run:
          name: "Run tests"
          command: |
            pwd
            . venv/bin/activate
            mkdir -p test-results
            python -m pytest tests/unit --junitxml=test-results/results.xml || true
      - store_test_results:
          path: test-results/results.xml


  run-job-on-ec2-docker:
    executor: machine-executor
    resource_class: itsnap/itsnap-runner
    steps:
      - checkout
      - run:
          name: "Sprawdź czy istnieje tag i ma poprawny format"
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "Błąd: Ten job wymaga tagu Git!"
              echo "Aktualny commit nie posiada tagu."
              exit 1
            else
              # Sprawdzenie formatu tagu za pomocą wyrażenia regularnego
              if [[ ! "$CIRCLE_TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+.* ]]; then
                echo "Błąd: Tag musi być w formacie X.Y.Z (opcjonalnie z przyrostkiem)"
                echo "Aktualny tag: $CIRCLE_TAG nie spełnia wymagań."
                exit 1
              else
                echo "Tag istnieje i ma poprawny format: $CIRCLE_TAG"
                echo "Kontynuujemy proces..."
              fi
            fi

      - run:
          name: "Debugowanie uprawnień Docker"
          command: |
            whoami
            groups
            ls -la /var/run/docker.sock
            cat /etc/group | grep docker
            id
            env

      - run:
          name: "Execute job on EC2"
          command: |
            docker build -t lenie-ai-server:latest .
  

  stop-ec2:
    executor: python-executor
    steps:
      - aws-cli/setup
      - run:
          name: "Start EC2 instances"
          command: |
            aws ec2 stop-instances --instance-ids $INSTANCE_ID

workflows:
  ec2-workflow:
    jobs:
      - start-ec2:
          filters:
            branches:
              only:
                - main
                - dev
            tags:
              only: /^\d+\.\d+\.\d+.*/
      - run-job-on-ec2:
          requires:
            - start-ec2
          filters:
            branches:
              only:
                - main
                - dev
            tags:
              only: /^\d+\.\d+\.\d+.*/
#      - Hold-for-Approval:
#          type: approval
#          requires:
#            - run-job-on-ec2
      - run-job-on-ec2-docker:
          requires:
            - run-job-on-ec2
          filters:
            branches:
              only:
                - main
                - dev
            tags:
              only: /^\d+\.\d+\.\d+.*/

      - stop-ec2:
          requires:
            - run-job-on-ec2-docker
          filters:
            branches:
              only:
                - main
                - dev
            tags:
              only: /^\d+\.\d+\.\d+.*/
          when: always
