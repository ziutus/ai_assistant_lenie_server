AWSTemplateFormatVersion: '2010-09-09'
Description: Template do tworzenia VPC z parametryzowanymi CIDR

Parameters:
  VpcName:
    Type: String
    Default: 'MyVPC'
    Description: 'Nazwa VPC'
  ProjectName:
    Type: String
    Default: 'Lenie'
    Description: 'Project Name'
  Environment:
    Type: String
    Default: 'dev'
    Description: 'environment'
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'
  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR block for the first public subnet'
  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR block for the second public subnet'
  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'CIDR block for the first private subnet'
  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.4.0/24'
    Description: 'CIDR block for the second private subnet'
  PrivateDBSubnet1Cidr:
    Type: String
    Default: '10.0.5.0/24'
    Description: 'CIDR block for the first private DB subnet'
  PrivateDBSubnet2Cidr:
    Type: String
    Default: '10.0.6.0/24'
    Description: 'CIDR block for the second private DB subnet'

Resources:
  LenieVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-VPC'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PublicSubnet2'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PrivateSubnet2'

  PrivateDBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PrivateDBSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PrivateDBSubnet1'

  PrivateDBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref LenieVPC
      CidrBlock: !Ref PrivateDBSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-PrivateDBSubnet2'

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref LenieVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LenieVPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-RouteTable'

  MyRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

Outputs:
  VpcId:
    Description: ID of the created VPC
    Value: !Ref LenieVPC
  PublicSubnet1Id:
    Description: ID of the created PublicSubnet1
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: ID of the created PublicSubnet2
    Value: !Ref PublicSubnet2
  InternetGatewayId:
    Description: ID of the created Internet Gateway
    Value: !Ref MyInternetGateway
  RouteTableId:
    Description: ID of the created Route Table
    Value: !Ref MyRouteTable