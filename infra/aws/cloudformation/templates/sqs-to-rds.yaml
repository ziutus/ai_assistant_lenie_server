AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ProjectName:
    Type: String
    Description: 'Project Name'
  Environment:
    Type: String
    Description: 'environment'
  DbInstanceIdentifier:
    Type: String
    Description: 'RDS Instance Identifier'
  QueueUrl:
    Type: String
  ScheduleExpression:
    Type: String

Resources:
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StateMachinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - rds:DescribeDBInstances
                  - rds:StartDBInstance
                  - rds:StopDBInstance
                  - lambda:InvokeFunction
                Resource: "*"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:GetLogRecord
                  - logs:GetLogGroupFields
                  - logs:GetQueryResults
                Resource:
                  - !GetAtt StateMachineLogGroup.Arn
                  - !Sub "${StateMachineLogGroup.Arn}:*"

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/states/${ProjectName}-${Environment}-sqs-to-rds"
      RetentionInDays: 14  # Możesz dostosować okres przechowywania logów

  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${ProjectName}-${Environment}-sqs-to-rds
      RoleArn: !GetAtt StateMachineRole.Arn
      LoggingConfiguration:
        Level: "ERROR"  # Możliwe wartości: ALL, ERROR, FATAL, OFF
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn


      DefinitionString: >
        {
          "Comment": "A description of my state machine",
          "StartAt": "Save Variables",
          "States": {
            "Save Variables": {
              "Type": "Pass",
              "Next": "SQS-GetNumberOfMessages",
              "Assign": {
                "QueueUrl.$": "$.QueueUrl",
                "DbInstanceIdentifier.$": "$.DbInstanceIdentifier",
                "StopDatabase.$": "$.StopDatabase"
              }
            },
            "SQS-GetNumberOfMessages": {
              "Type": "Task",
              "Parameters": {
                "AttributeNames": [
                  "ApproximateNumberOfMessages"
                ],
                "QueueUrl.$": "$.QueueUrl"
              },
              "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
              "Next": "AreMessagesInQueue",
              "OutputPath": "$.Attributes.ApproximateNumberOfMessages"
            },
            "ReceiveMessage": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
              "Parameters": {
                "QueueUrl.$": "$QueueUrl",
                "MaxNumberOfMessages": 10
              },
              "Next": "CheckIfMessagesExist"
            },
            "AreMessagesInQueue": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$",
                  "StringGreaterThan": "0",
                  "Next": "DescribeDBInstances"
                }
              ],
              "Default": "NoMessages"
            },
            "CheckIfMessagesExist": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Messages",
                  "IsPresent": true,
                  "Next": "Save message into variable"
                }
              ],
              "Default": "Database Should be stopped?"
            },
            "Save message into variable": {
              "Type": "Pass",
              "Next": "Get messages from variables",
              "Assign": {
                "Messages.$": "$.Messages"
              }
            },
            "DescribeDBInstances": {
              "Type": "Task",
              "Parameters": {
                "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
              },
              "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
              "Next": "GetRdsStatus"
            },
            "GetRdsStatus": {
              "Type": "Pass",
              "Next": "choise by database state",
              "InputPath": "$.DbInstances[0].DbInstanceStatus"
            },
            "choise by database state": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$",
                  "StringEquals": "available",
                  "Next": "ReceiveMessage"
                },
                {
                  "Or": [
                    {
                      "Variable": "$",
                      "StringEquals": "stopped"
                    }
                  ],
                  "Next": "StartDBInstance",
                  "Assign": {
                    "waitSeconds": 300
                  }
                },
                {
                  "Or": [
                    {
                      "Variable": "$",
                      "StringEquals": "starting"
                    },
                    {
                      "Variable": "$",
                      "StringEquals": "configuring-enhanced-monitoring"
                    },
                    {
                      "Variable": "$",
                      "StringEquals": "backing-up"
                    }
                  ],
                  "Next": "Wait for database",
                  "Assign": {
                    "waitSeconds": 60
                  }
                },
                {
                  "Variable": "$",
                  "StringEquals": "stopping",
                  "Next": "Wait for database",
                  "Assign": {
                    "waitSeconds": 120
                  }
                }
              ],
              "Default": "Fail - not supported database state"
            },
            "Get messages from variables": {
              "Type": "Pass",
              "Next": "Map - Each message",
              "Assign": {
                "Messages.$": "$Messages"
              },
              "Parameters": {
                "Messages.$": "$Messages"
              }
            },
            "Fail - not supported database state": {
              "Type": "Fail"
            },
            "StartDBInstance": {
              "Type": "Task",
              "Parameters": {
                "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
              },
              "Resource": "arn:aws:states:::aws-sdk:rds:startDBInstance",
              "Next": "Wait for database"
            },
            "Wait for database": {
              "Type": "Wait",
              "Next": "DescribeDBInstances",
              "SecondsPath": "$waitSeconds"
            },
            "Map - Each message": {
              "Type": "Map",
              "ItemsPath": "$.Messages",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Put Document into RDS",
                "States": {
                  "Put Document into RDS": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.Payload",
                    "Parameters": {
                      "FunctionName": "lenie-sqs-to-db",
                      "Payload.$": "$"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "Next": "ExtractReceiptHandle - sqs message ID"
                  },
                  "ExtractReceiptHandle - sqs message ID": {
                    "Type": "Pass",
                    "Next": "Delete Document from SQS",
                    "Parameters": {
                      "QueueUrl.$": "$QueueUrl",
                      "ReceiptHandle.$": "$.body"
                    }
                  },
                  "Delete Document from SQS": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::aws-sdk:sqs:deleteMessage",
                    "Parameters": {
                      "QueueUrl.$": "$QueueUrl",
                      "ReceiptHandle.$": "$.ReceiptHandle"
                    },
                    "End": true
                  }
                }
              },
              "Next": "GetQueueAttributesAgain"
            },
            "GetQueueAttributesAgain": {
              "Type": "Task",
              "Parameters": {
                "AttributeNames": [
                  "ApproximateNumberOfMessages"
                ],
                "QueueUrl.$": "$QueueUrl"
              },
              "Resource": "arn:aws:states:::aws-sdk:sqs:getQueueAttributes",
              "Next": "AreStillMessagesInQueue",
              "OutputPath": "$.Attributes.ApproximateNumberOfMessages"
            },
            "AreStillMessagesInQueue": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$",
                  "StringGreaterThan": "0",
                  "Next": "ReceiveMessage"
                }
              ],
              "Default": "Database Should be stopped?"
            },
            "Database Should be stopped?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$StopDatabase",
                  "StringEquals": "yes",
                  "Next": "StopDBInstance",
                  "Assign": {
                    "StopDatabase.$": "$StopDatabase"
                  }
                }
              ],
              "Default": "Success without database stop"
            },
            "Success without database stop": {
              "Type": "Succeed"
            },
            "StopDBInstance": {
              "Type": "Task",
              "Parameters": {
                "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
              },
              "Resource": "arn:aws:states:::aws-sdk:rds:stopDBInstance",
              "Next": "Success with database stop"
            },
            "Success with database stop": {
              "Type": "Succeed"
            },
            "NoMessages": {
              "Type": "Pass",
              "Comment": "No messages available in the SQS queue.",
              "Next": "Success as no messages"
            },
            "Success as no messages": {
              "Type": "Succeed"
            }
          }
        }

  StepFunctionInvokerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "scheduler.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StepFunctionInvokePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !GetAtt MyStateMachine.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
