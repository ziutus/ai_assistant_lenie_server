AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for lenie-dev-url-add Lambda function'

Resources:
  LenineUrlAddLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'lenie-dev-url-add'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-x86_64:6
      Code:
        S3Bucket: lenie-dev-cloudformation
        S3Key: lenie-dev-url-add.zip

      Runtime: 'python3.11'
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          LOG_LEVEL: 'INFO'
          AWS_QUEUE_URL_ADD: https://sqs.us-east-1.amazonaws.com/008971653395/lenie_websites
          BUCKET_NAME: lenie-s3-tmp


  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  UrlAddApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'lenie_dev_add_from_chrome_extension'
      Description: 'API for Chrome extension "Lenie AI assistant"'
      EndpointConfiguration:
        Types:
          - REGIONAL
      ApiKeySourceType: HEADER

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Name: 'lenie-dev-chrome-extension-key'
      Description: 'API Key for Chrome extension'
      Enabled: true

  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref UrlAddApi
          Stage: !Ref ApiStage
      Description: 'Usage plan for Chrome extension API'
      UsagePlanName: 'lenie-dev-chrome-extension-plan'

  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  UrlAddResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref UrlAddApi
      ParentId: !GetAtt UrlAddApi.RootResourceId
      PathPart: 'url_add'


  UrlAddMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref UrlAddApi
      ResourceId: !Ref UrlAddResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LenineUrlAddLambdaFunction.Arn}/invocations'
        TimeoutInMillis: 29000
        ContentHandling: CONVERT_TO_TEXT
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'

  UrlAddOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref UrlAddApi
      ResourceId: !Ref UrlAddResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref UrlAddApi
      StageName: 'v1'


  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - UrlAddMethod
      - UrlAddOptionsMethod
    Properties:
      RestApiId: !Ref UrlAddApi

  LambdaApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LenineUrlAddLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UrlAddApi}/*/*/*'

Outputs:
  ApiEndpoint:
    Description: "API Gateway URL"
    Value: !Sub 'https://${UrlAddApi}.execute-api.${AWS::Region}.amazonaws.com/v1/url_add'
  ApiKeyID:
    Description: "API Key ID"
    Value: !Ref ApiKey
