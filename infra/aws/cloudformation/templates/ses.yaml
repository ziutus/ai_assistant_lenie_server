AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
    Description: 'Project Name'
  Environment:
    Type: String
    Description: 'environment'
  HostedZoneId:
    Type: String
    Description: 'Route53 Zone ID'

Resources:
  SESDomainIdentity:
    Type: "AWS::SES::EmailIdentity"
    Properties:
      EmailIdentity: !Sub "${Environment}.lenie-ai.eu"
      DkimSigningAttributes:
        NextSigningKeyLength: "RSA_2048_BIT"

  # Rola IAM dla funkcji Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Route53AndSESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListHostedZones
                  - ses:GetIdentityDkimAttributes
                Resource: '*'

  # Funkcja Lambda
  DnsUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      LoggingConfig:
        LogFormat: JSON
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-x86_64:6

      Code:
        ZipFile: |
          from aws_lambda_powertools import Logger, Metrics, Tracer
          from aws_lambda_powertools.utilities.typing import LambdaContext
          from aws_lambda_powertools.metrics import MetricUnit
          import boto3
          import json
          import botocore
          import cfnresponse
          
          
          def check_dns_record_exists(hosted_zone_id, record_name, record_type):
              """
              Sprawdza, czy rekord DNS istnieje w danej Hosted Zone Route 53.
          
              :param hosted_zone_id: ID strefy hostowanej
              :param record_name: Nazwa rekordu, np. 'example.com.'
              :param record_type: Typ rekordu, np. 'A', 'CNAME', 'TXT', itd.
              :return: Boolean - True, jeśli rekord istnieje, False w przeciwnym wypadku
              """
              try:
                  # Pobieranie rekordów DNS z danej Hosted Zone
                  response = route53_client.list_resource_record_sets(
                      HostedZoneId=hosted_zone_id
                  )
                  # Iteracja po zwróconych rekordach
                  for record in response['ResourceRecordSets']:
                      if record['Name'] == record_name and record['Type'] == record_type:
                          return True
                  return False
              except Exception as e:
                  print(f"Błąd podczas sprawdzania rekordu DNS: {e}")
                  return False
          
          
          # Inicjalizacja powertools
          logger = Logger()
          metrics = Metrics(namespace="MyLambdaNamespace", service="DnsUpdater")
          tracer = Tracer()
          
          # Klienci boto3
          route53_client = boto3.client('route53')
          ses_client = boto3.client('ses')
          
          
          @metrics.log_metrics  # Automatyczne wysyłanie metryk do Amazon CloudWatch
          @tracer.capture_lambda_handler  # Śledzenie za pomocą AWS X-Ray
          @logger.inject_lambda_context  # Automatyczne logowanie kontekstu Lambda
          def handler(event: dict, context: LambdaContext):
              logger.info("Rozpoczęcie przetwarzania zdarzenia", extra={"event": event})
          
              if not 'ResourceProperties' in event:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Missing "ResourceProperties" in "event"'})
                  return {"statusCode": 501, "body": json.dumps({"message": "Error: Missing 'ResourceProperties' in 'event' "})}
          
              if not 'RequestType' in event:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Missing "RequestType" in "event"'})
                  return {"statusCode": 501, "body": json.dumps({"message": "Error: Missing 'RequestType' in 'event' "})}
          
              if event["RequestType"] in ["Create", "Update"]:
                  action = 'UPSERT'
              elif event["RequestType"] == "Delete":
                  action = 'DELETE'
              else:
                  cfnresponse.send(event, context, cfnresponse.FAILED,
                                   {'Error': f'Not implemented action >{event["RequestType"]}<'})
                  return {"statusCode": 500,
                          "body": json.dumps({"message": f"Not implemented action >{event['RequestType']}<"})}
          
              if not 'EmailIdentity' in event['ResourceProperties']:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Missing "EmailIdentity" in "event"'})
                  return {"statusCode": 501, "body": json.dumps({"message": "Error: Missing 'EmailIdentity' in 'event'"})}
          
              if not 'HostedZoneId' in event['ResourceProperties']:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Missing "HostedZoneId" in "event"'})
                  return {"statusCode": 501, "body": json.dumps({"message": "Error: Missing 'HostedZoneId' in 'event'"})}
          
              # Pobieranie parametrów
              email_identity = event['ResourceProperties']['EmailIdentity']
              hosted_zone_id = event['ResourceProperties']['HostedZoneId']
              logger.debug("Pobrane parametry", extra={"email_identity": email_identity, "hosted_zone_id": hosted_zone_id})
          
              try:
          
                  # Pobranie DKIM tokens z SES
                  dkim_attributes = ses_client.get_identity_dkim_attributes(Identities=[email_identity])
                  logger.debug(
                      "Pobrane atrybuty DKIM",
                      extra={"dkim_attributes": dkim_attributes}
                  )
          
                  dkim_tokens = dkim_attributes['DkimAttributes'][email_identity]['DkimTokens']
          
                  if event["RequestType"] in ["Create", "Update"]:
                      changes = [
                          {
                              'Action': action,
                              'ResourceRecordSet': {
                                  'Name': f'{token}._domainkey.{email_identity}.',
                                  'Type': 'CNAME',
                                  'TTL': 300,
                                  'ResourceRecords': [
                                      {'Value': f'{token}.dkim.amazonses.com'}
                                  ]
                              }
                          } for token in dkim_tokens
                      ]
                  else:
                      changes = []
                      for token in dkim_tokens:
                          if check_dns_record_exists(hosted_zone_id, f'{token}._domainkey.{email_identity}.', 'CNAME'):
                              changes.append({
                                  'Action': action,
                                  'ResourceRecordSet': {
                                      'Name': f'{token}._domainkey.{email_identity}.',
                                      'Type': 'CNAME',
                                      'TTL': 300,
                                      'ResourceRecords': [
                                          {'Value': f'{token}.dkim.amazonses.com'}
                                      ]}
                                  })
          
                              if len(changes) > 0:
                                  route53_response = route53_client.change_resource_record_sets(
                                          HostedZoneId=hosted_zone_id,
                                          ChangeBatch={
                                              'Comment': 'Automatyczna aktualizacja rekordów DKIM przez Lambda',
                                              'Changes': changes
                                          }
                                  )
                                  logger.info("Pomyślnie zaktualizowano rekordy DNS", extra={"route53_response": route53_response})
                              else:
                                  logger.info("Brak rekordów do aktualizacji")
          
                              # Dodanie metryk
                              metrics.add_metric(name="Route53Updates", unit=MetricUnit.Count, value=1)
          
                              response_data = {'Message': 'Operacja zakończona sukcesem'}
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  return {"statusCode": 200, "body": json.dumps({"message": "Success"})}
          
              except botocore.exceptions.ClientError as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
                  logger.exception("Wystąpił błąd podczas przetwarzania zdarzenia")
                  metrics.add_metric(name="Errors", unit=MetricUnit.Count, value=1)
                  raise
          
              except Exception as error:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(error)})
                  logger.exception("Wystąpił błąd podczas przetwarzania zdarzenia")
                  metrics.add_metric(name="Errors", unit=MetricUnit.Count, value=1)
                  raise
      Timeout: 300
      MemorySize: 128

  # Niestandardowy zasób do wywołania Lambdy
  DnsUpdateTrigger:
    Type: Custom::DnsUpdater
    DependsOn: SESDomainIdentity
    Properties:
      ServiceToken: !GetAtt DnsUpdaterFunction.Arn
      EmailIdentity: !Ref SESDomainIdentity
      HostedZoneId: "Z07906713RCJHAZLQEP4C"
