{
  "Comment": "A description of my state machine",
  "StartAt": "Show Variables",
  "States": {
    "Show Variables": {
      "Type": "Pass",
      "Next": "ReceiveMessage",
      "Assign": {
        "QueueUrl.$": "$.QueueUrl",
        "DbInstanceIdentifier.$": "$.DbInstanceIdentifier",
        "StopDatabase.$": "$.StopDatabase"
      }
    },
    "ReceiveMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
      "Parameters": {
        "QueueUrl.$": "$.QueueUrl",
        "MaxNumberOfMessages": 10
      },
      "Next": "CheckIfMessagesExist"
    },
    "CheckIfMessagesExist": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Messages",
          "IsPresent": true,
          "Next": "Save message into variable"
        }
      ],
      "Default": "NoMessages"
    },
    "Save message into variable": {
      "Type": "Pass",
      "Next": "DescribeDBInstances",
      "Assign": {
        "Messages.$": "$.Messages"
      }
    },
    "DescribeDBInstances": {
      "Type": "Task",
      "Parameters": {
        "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Next": "GetRdsStatus"
    },
    "GetRdsStatus": {
      "Type": "Pass",
      "Next": "choise by database state",
      "InputPath": "$.DbInstances[0].DbInstanceStatus"
    },
    "choise by database state": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$",
          "StringEquals": "available",
          "Next": "Get messages from variables"
        },
        {
          "Or": [
            {
              "Variable": "$",
              "StringEquals": "stopped"
            }
          ],
          "Next": "StartDBInstance",
          "Assign": {
            "waitSeconds": 300
          }
        },
        {
          "Or": [
            {
              "Variable": "$",
              "StringEquals": "starting"
            },
            {
              "Variable": "$",
              "StringEquals": "configuring-enhanced-monitoring"
            },
            {
              "Variable": "$",
              "StringEquals": "backing-up"
            }
          ],
          "Next": "Wait for database",
          "Assign": {
            "waitSeconds": 60
          }
        },
        {
          "Variable": "$",
          "StringEquals": "stopping",
          "Next": "Wait for database",
          "Assign": {
            "waitSeconds": 120
          }
        }
      ],
      "Default": "Fail - not supported database state"
    },
    "Get messages from variables": {
      "Type": "Pass",
      "Next": "Map - Each message",
      "Assign": {
        "Messages.$": "$Messages"
      },
      "Parameters": {
        "Messages.$": "$Messages"
      }
    },
    "Fail - not supported database state": {
      "Type": "Fail"
    },
    "StartDBInstance": {
      "Type": "Task",
      "Parameters": {
        "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:startDBInstance",
      "Next": "Wait for database"
    },
    "Wait for database": {
      "Type": "Wait",
      "Next": "DescribeDBInstances",
      "SecondsPath": "$waitSeconds"
    },
    "Map - Each message": {
      "Type": "Map",
      "ItemsPath": "$.Messages",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Put Document into RDS",
        "States": {
          "Put Document into RDS": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "lenie-sqs-to-db",
              "Payload.$": "$"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "ExtractReceiptHandle - sqs message ID"
          },
          "ExtractReceiptHandle - sqs message ID": {
            "Type": "Pass",
            "Next": "Delete Document from SQS",
            "Parameters": {
              "QueueUrl.$": "$QueueUrl",
              "ReceiptHandle.$": "$.body"
            }
          },
          "Delete Document from SQS": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:sqs:deleteMessage",
            "Parameters": {
              "QueueUrl.$": "$QueueUrl",
              "ReceiptHandle.$": "$.ReceiptHandle"
            },
            "End": true
          }
        }
      },
      "Next": "Database Should be stopped?"
    },
    "Database Should be stopped?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$StopDatabase",
          "StringEquals": "yes",
          "Next": "StopDBInstance",
          "Assign": {
            "StopDatabase.$": "$StopDatabase"
          }
        }
      ],
      "Default": "Success without database stop"
    },
    "Success without database stop": {
      "Type": "Succeed"
    },
    "StopDBInstance": {
      "Type": "Task",
      "Parameters": {
        "DbInstanceIdentifier.$": "$DbInstanceIdentifier"
      },
      "Resource": "arn:aws:states:::aws-sdk:rds:stopDBInstance",
      "Next": "Success with database stop"
    },
    "Success with database stop": {
      "Type": "Succeed"
    },
    "NoMessages": {
      "Type": "Pass",
      "Comment": "No messages available in the SQS queue.",
      "Next": "Success as no messages"
    },
    "Success as no messages": {
      "Type": "Succeed"
    }
  }
}
